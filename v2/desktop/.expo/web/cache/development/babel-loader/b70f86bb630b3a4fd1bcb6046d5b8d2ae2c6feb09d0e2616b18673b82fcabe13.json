{"ast":null,"code":"import { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, handlers, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nfunction logUnknownEvent(type) {\n  console.error(\"`\" + type + \"` is not a valid react-native-localize event\");\n}\nfunction getPartialTag(_ref) {\n  var languageCode = _ref.languageCode,\n    scriptCode = _ref.scriptCode;\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\nexport function addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\nexport function removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\nexport function findBestAvailableLanguage(languageTags) {\n  var locales = getLocales();\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n      languageCode = currentLocale.languageCode,\n      isRTL = currentLocale.isRTL;\n    if (languageTags.includes(languageTag)) {\n      return {\n        languageTag: languageTag,\n        isRTL: isRTL\n      };\n    }\n    var partial = getPartialTag(currentLocale);\n    var next = locales[i + 1];\n    if ((!next || partial !== getPartialTag(next)) && languageTags.includes(partial)) {\n      return {\n        languageTag: partial,\n        isRTL: isRTL\n      };\n    }\n    if ((!next || languageCode !== next.languageCode) && languageTags.includes(languageCode)) {\n      return {\n        languageTag: languageCode,\n        isRTL: isRTL\n      };\n    }\n  }\n}\nexport * from \"./types\";\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, uses24HourClock, usesAutoDateAndTime, usesAutoTimeZone, usesMetricSystem } from \"./module\";\nexport default {\n  getCalendar: getCalendar,\n  getCountry: getCountry,\n  getCurrencies: getCurrencies,\n  getLocales: getLocales,\n  getNumberFormatSettings: getNumberFormatSettings,\n  getTemperatureUnit: getTemperatureUnit,\n  getTimeZone: getTimeZone,\n  uses24HourClock: uses24HourClock,\n  usesAutoDateAndTime: usesAutoDateAndTime,\n  usesAutoTimeZone: usesAutoTimeZone,\n  usesMetricSystem: usesMetricSystem,\n  findBestAvailableLanguage: findBestAvailableLanguage,\n  addEventListener: addEventListener,\n  removeEventListener: removeEventListener\n};","map":{"version":3,"names":["getCalendar","getCountry","getCurrencies","getLocales","getNumberFormatSettings","getTemperatureUnit","getTimeZone","handlers","uses24HourClock","usesAutoDateAndTime","usesAutoTimeZone","usesMetricSystem","logUnknownEvent","type","console","error","getPartialTag","_ref","languageCode","scriptCode","addEventListener","handler","has","add","removeEventListener","delete","findBestAvailableLanguage","languageTags","locales","i","length","currentLocale","languageTag","isRTL","includes","partial","next"],"sources":["/Users/lilkizarmie/Documents/GitHub/pixEcoe/v2/destop/node_modules/react-native-localize/dist/module/index.ts"],"sourcesContent":["import {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  handlers,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\nimport { Locale, LocalizationEvent } from \"./types\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\n\nfunction getPartialTag({ languageCode, scriptCode }: Locale) {\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage<T extends string>(\n  languageTags: ReadonlyArray<T>,\n): { languageTag: T; isRTL: boolean } | undefined {\n  const locales = getLocales();\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, isRTL } = currentLocale;\n\n    if (languageTags.includes(languageTag as T)) {\n      return { languageTag: languageTag as T, isRTL };\n    }\n\n    const partial = getPartialTag(currentLocale);\n    const next = locales[i + 1];\n\n    if (\n      (!next || partial !== getPartialTag(next)) &&\n      languageTags.includes(partial as T)\n    ) {\n      return { languageTag: partial as T, isRTL };\n    }\n\n    if (\n      (!next || languageCode !== next.languageCode) &&\n      languageTags.includes(languageCode as T)\n    ) {\n      return { languageTag: languageCode as T, isRTL };\n    }\n  }\n}\n\nexport * from \"./types\";\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n} from \"./module\";\n\nexport default {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n  usesMetricSystem,\n\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}