{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useTranslation } from \"react-i18next\";\nimport { COLORS } from \"../constants/theme\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar QuestionList = function QuestionList(_ref) {\n  var section = _ref.section,\n    handleAnswerSelection = _ref.handleAnswerSelection,\n    selectedAnswers = _ref.selectedAnswers;\n  var _useTranslation = useTranslation(),\n    t = _useTranslation.t;\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: {\n        color: \"#111F51\",\n        fontSize: 20,\n        fontWeight: \"500\",\n        marginTop: 20\n      },\n      children: section.section\n    }), section.questions.map(function (question) {\n      return _jsxs(View, {\n        children: [_jsx(View, {\n          style: {\n            width: 45,\n            height: 45,\n            justifyContent: \"center\",\n            marginTop: 30,\n            backgroundColor: COLORS.primary,\n            alignItems: \"center\",\n            borderRadius: 10,\n            marginBottom: 20\n          },\n          children: _jsx(Text, {\n            style: {\n              color: \"#FFFFFF\",\n              fontSize: 18,\n              fontWeight: \"500\"\n            },\n            children: question.questionnumber\n          })\n        }), Object.entries(question.answers).map(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n            answerNumber = _ref3[0],\n            answer = _ref3[1];\n          return _jsx(TouchableOpacity, {\n            style: {\n              width: \"100%\"\n            },\n            onPress: function onPress() {\n              return handleAnswerSelection(question.questionnumber, parseInt(answerNumber));\n            },\n            children: _jsx(View, {\n              style: {\n                borderColor: selectedAnswers[question.questionnumber] === parseInt(answerNumber) ? \"#14AE5C\" : \"transparent\",\n                borderWidth: 2,\n                borderRadius: 10,\n                padding: 10,\n                flexDirection: \"row\",\n                backgroundColor: selectedAnswers[question.questionnumber] === parseInt(answerNumber) ? \"#14AE5C\" : \"transparent\",\n                opacity: 10\n              },\n              children: _jsxs(View, {\n                style: {\n                  marginLeft: 20,\n                  width: \"95%\"\n                },\n                children: [_jsx(Text, {\n                  style: {\n                    color: selectedAnswers[question.questionnumber] === parseInt(answerNumber) ? \"#FFFFFF\" : \"#111F51\",\n                    fontSize: 20,\n                    fontWeight: \"500\",\n                    textAlign: \"justify\"\n                  },\n                  children: answer.text1\n                }), _jsx(View, {\n                  style: styles.topicBox,\n                  children: _jsx(Text, {\n                    style: styles.topicText,\n                    children: answer.text2\n                  })\n                })]\n              })\n            })\n          }, answerNumber);\n        })]\n      }, question.questionnumber);\n    })]\n  });\n};\nexport default QuestionList;\nvar styles = StyleSheet.create({\n  topicBox: {\n    width: \"100%\",\n    height: 55,\n    backgroundColor: \"#ffffff\",\n    borderRadius: 5,\n    justifyContent: \"center\",\n    paddingLeft: 10,\n    marginTop: 20\n  },\n  topicText: {\n    fontSize: 18\n  }\n});","map":{"version":3,"names":["React","useState","View","StyleSheet","Text","TouchableOpacity","useTranslation","COLORS","jsx","_jsx","jsxs","_jsxs","QuestionList","_ref","section","handleAnswerSelection","selectedAnswers","_useTranslation","t","children","style","color","fontSize","fontWeight","marginTop","questions","map","question","width","height","justifyContent","backgroundColor","primary","alignItems","borderRadius","marginBottom","questionnumber","Object","entries","answers","_ref2","_ref3","_slicedToArray","answerNumber","answer","onPress","parseInt","borderColor","borderWidth","padding","flexDirection","opacity","marginLeft","textAlign","text1","styles","topicBox","topicText","text2","create","paddingLeft"],"sources":["/Users/lilkizarmie/Documents/GitHub/pixEcoe/v2/destop/src/components/QuestionList.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n} from \"react-native\";\nimport { useTranslation } from \"react-i18next\";\nimport { COLORS } from \"../constants/theme\";\n\nconst QuestionList = ({ section, handleAnswerSelection, selectedAnswers }) => {\n  \n  const { t } = useTranslation();\n  \n  return (\n    <View>\n      <Text\n        style={{\n          color: \"#111F51\",\n          fontSize: 20,\n          fontWeight: \"500\",\n          marginTop: 20,\n        }}\n      >\n        {section.section}\n      </Text>\n      {section.questions.map((question) => (\n        <View key={question.questionnumber}>\n          <View\n            style={{\n              width: 45,\n              height: 45,\n              justifyContent: \"center\",\n              marginTop: 30,\n              backgroundColor: COLORS.primary,\n              alignItems: \"center\",\n              borderRadius: 10,\n              marginBottom: 20,\n            }}\n          >\n            <Text\n              style={{\n                color: \"#FFFFFF\",\n                fontSize: 18,\n                fontWeight: \"500\",\n              }}\n            >\n              {question.questionnumber}\n            </Text>\n          </View>\n          {/* map the answer array */}\n\n          {Object.entries(question.answers).map(([answerNumber, answer]) => (\n            <TouchableOpacity\n              style={{\n                width: \"100%\",\n              }}\n              key={answerNumber}\n              onPress={() =>\n                handleAnswerSelection(\n                  question.questionnumber,\n                  parseInt(answerNumber)\n                )\n              }\n            >\n              <View\n                style={{\n                  borderColor:\n                    selectedAnswers[question.questionnumber] ===\n                    parseInt(answerNumber)\n                      ? \"#14AE5C\"\n                      : \"transparent\",\n                  borderWidth: 2,\n                  borderRadius: 10,\n                  padding: 10,\n                  flexDirection: \"row\",\n                  backgroundColor:\n                    selectedAnswers[question.questionnumber] ===\n                    parseInt(answerNumber)\n                      ? \"#14AE5C\"\n                      : \"transparent\",\n                  opacity: 10,\n                }}\n              >\n                {/* <View style={{ width: \"6%\", height: 80, borderRadius: 20 }}>\n                  <View\n                    style={{\n                      height: 40,\n                      backgroundColor: \"#111F51\",\n                      borderTopLeftRadius: 10,\n                      borderTopRightRadius: 10,\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    \n                    <Text\n                      style={{\n                        color: \"#fff\",\n                        fontSize: 20,\n                        fontWeight: \"500\",\n                      }}\n                    >\n                      {answer.literal}\n                    </Text>\n                   \n                  </View>\n                  <View\n                    style={{\n                      height: 40,\n                      backgroundColor: \"#3E3E3E\",\n                      borderBottomLeftRadius: 10,\n                      borderBottomRightRadius: 10,\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    \n                    <Text\n                      style={{\n                        color: \"#fff\",\n                        fontSize: 20,\n                        fontWeight: \"500\",\n                      }}\n                    >\n                      {answer.points}\n                    </Text>\n                   \n                  </View>\n                </View> */}\n                <View style={{ marginLeft: 20, width: \"95%\" }}>\n                  {/* text2 */}\n                  <Text\n                    style={{\n                      color: selectedAnswers[question.questionnumber] ===\n                    parseInt(answerNumber)\n                      ? \"#FFFFFF\"\n                      : \"#111F51\",\n                      fontSize: 20,\n                      fontWeight: \"500\",\n                      textAlign: \"justify\",\n                    }}\n                  >\n                    {answer.text1}\n                  </Text>\n                  {/* text2 */}\n                  <View style={styles.topicBox}>\n                    {/* text1 */}\n                    <Text style={styles.topicText}>{answer.text2}</Text>\n                    {/* text1 */}\n                  </View>\n                </View>\n              </View>\n            </TouchableOpacity>\n          ))}\n          {/* map the answer array */}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nexport default QuestionList;\n\nconst styles = StyleSheet.create({\n  topicBox: {\n    width: \"100%\",\n    height: 55,\n    backgroundColor: \"#ffffff\",\n    borderRadius: 5,\n    justifyContent: \"center\",\n    paddingLeft: 10,\n    marginTop: 20,\n  },\n  topicText: {\n    fontSize: 18,\n  },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}